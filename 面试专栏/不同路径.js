/**
 * 一个机器人位于一个 m x n 网格的左上角 (起始点在下图中标记为“Start” )。
 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角(在下图中标记为“Finish”)。
 * 问总共有多少条不同的路径?
 * 示例 1:
 * 输入: m = 3, n = 7
 * 输出: 28
 * 示例 2:
 * 输入: m = 3, n = 2
 * 输出: 3
 * 解释:
 * 从左上角开始,总共有 3 条路径可以到达右下角。
 * 1. 向右 -> 向下 -> 向下
 * 2. 向下 -> 向下 -> 向右
 * 3. 向下 -> 向右 -> 向下
 */

//动态规划解法
/**
 * 1.定义状态
 * 2.状态转移
 * 3.边界条件
 * 4.最终目标
 */

function uniquePaths(m, n) {
  //创建一个数组dp，表示每个位置的路径数
  let dp = new Array(n).fill(1); //初始化第一行1，因为从第一行到右下角只有一条路径

  // 第二行开始填充dp数组
  for(let i = 1; i < m; i++) {
    for(let j = 1; i < n; j++) {
      dp[j] += dp[j - 1]; //当前格子路径数等于上方格子路径数加上左边格子路径数
    }
  }

  //最终dp[n-1]即为右下角的路径数
  return dp[n - 1]; 
}